// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaiGonHiker.DataAccessor.Data;

namespace SaiGonHiker.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220629134005_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "5ce1261b-ecce-4d12-9c96-2c63ea10678f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "7c997e31-1e94-4026-8b34-f0f912e2136c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SaiGonHiker.DataAccessor.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tour");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tour1",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour1",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A1",
                            Price = 500000,
                            Region = "Northern"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tour2",
                            DateOfArrival = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour2",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A2",
                            Price = 1500000,
                            Region = "Central"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Tour3",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour3",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A3",
                            Price = 1000000,
                            Region = "Southern"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Tour4",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour4",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A4",
                            Price = 500000,
                            Region = "Northern"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Tour5",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour5",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A5",
                            Price = 500000,
                            Region = "Northern"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Tour6",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour6",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A6",
                            Price = 500000,
                            Region = "Southern"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Tour7",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour7",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A7",
                            Price = 500000,
                            Region = "Central"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Tour8",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour8",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A8",
                            Price = 2500000,
                            Region = "Southern"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Tour9",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour9",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A9",
                            Price = 3500000,
                            Region = "Central"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Tour10",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour10",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A10",
                            Price = 1500000,
                            Region = "Southern"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Tour11",
                            DateOfArrival = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeparture = new DateTime(2022, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description Tour11",
                            Image = "https://media.travelmag.vn/files/tuannam/2020/09/13/1_-hoat-dong-mao-hiem-thu-thach-thu-hut-khach-du-lich-1618.jpg",
                            IsDelete = false,
                            Name = "A11",
                            Price = 4500000,
                            Region = "Central"
                        });
                });

            modelBuilder.Entity("SaiGonHiker.DataAccessor.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Binh Chanh District, HCM City",
                            ConcurrencyStamp = "c3ed25ad-7780-43c1-b22f-6828d9d2f8e2",
                            Email = "minhquan2122000@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Quan Tran",
                            Gender = "Male",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEA8uCDwYpsdUMax5mA0DvzV7C2hDtw7JQBRrgCiL6FN2PaWtHFOr/QTS4Ll9J9UTgw==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0001",
                            UserName = "quant"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "District 9, HCM City",
                            ConcurrencyStamp = "cc52f7ce-c258-4bed-8185-c4278be243fb",
                            Email = "khanh2122000@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Khanh Tran",
                            Gender = "Female",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENJZywzs76sbRtvYf0vfzhl7XDSRQCJW9B6l7sSMECIuBOikDJGY8v9Lt2jfXtulAg==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0002",
                            UserName = "khanht"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "District 5, HCM City",
                            ConcurrencyStamp = "1ccc9619-668d-485c-a377-69ac41b5f6f9",
                            Email = "hoang123456@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Hoang Nguyen",
                            Gender = "Male",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAS8j2Aiolsl+R0ZZnUPlsiBADH9GtBAkvNbWME9nJ+86ydilfwi7YTkEEXzWA33PQ==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0003",
                            UserName = "hoangnguyen"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "District 7, HCM City",
                            ConcurrencyStamp = "f89b0c88-e396-4cd2-b48e-e2cc8d530c9a",
                            Email = "duocn342@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Được Nguyễn",
                            Gender = "Male",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHbE4Sbe2VUJnRZNqFBsF/cRQSClIO5FE4ma4CcrQvwuxab50FFMp+0boMMxPMYZ3w==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0004",
                            UserName = "duocn"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "District 11, HCM City",
                            ConcurrencyStamp = "1825478f-95fc-4a89-a021-0e28e0d25a23",
                            Email = "nhit3450@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nhi Tran",
                            Gender = "Female",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECYyvIW1+gaRE6nCxKb4PbUbvGoZwLo/IFnrvcgZv1H59rJJQxu3fNEQVwPCVUTcdA==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0005",
                            UserName = "nhit345"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "District 1, HCM City",
                            ConcurrencyStamp = "aea39c95-1b08-4033-b6c7-96fee255824a",
                            Email = "phuognt234@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Phương Trần",
                            Gender = "Female",
                            IsDisabled = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEACwoDwwgpQl/WXpIlox0dsB2CX/SwAIkP+t3hZof8zTgleYy9LIYo1ZKDjFjZp2dQ==",
                            PhoneNumber = "0924721184",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserCode = "U0006",
                            UserName = "phuongt234"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SaiGonHiker.DataAccessor.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SaiGonHiker.DataAccessor.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaiGonHiker.DataAccessor.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SaiGonHiker.DataAccessor.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
